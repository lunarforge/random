package random

import (
	"crypto/rand"
	"encoding/base64"
	"log"
)

//https://stackoverflow.com/questions/22892120/how-to-generate-a-random-string-of-a-fixed-length-in-go
//https://stackoverflow.com/questions/38418171/how-to-generate-unique-random-string-in-a-length-range-using-golang
//https://blog.kowalczyk.info/article/JyRZ/generating-good-unique-ids-in-go.html
//https://github.com/rs/xid

const (
	letterBytes   = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890" // 52 possibilities
	letterIdxBits = 6                                                                // 6 bits to represent 64 possibilities / indexes
	letterIdxMask = 1<<letterIdxBits - 1                                             // All 1-bits, as many as letterIdxBits
)

func SecureRandomAlphaString(length int) string {

	result := make([]byte, length)
	bufferSize := int(float64(length) * 1.3)
	for i, j, randomBytes := 0, 0, []byte{}; i < length; j++ {
		if j%bufferSize == 0 {
			randomBytes = SecureRandomBytes(bufferSize)
		}
		if idx := int(randomBytes[j%length] & letterIdxMask); idx < len(letterBytes) {
			result[i] = letterBytes[idx]
			i++
		}
	}

	return string(result)
}

// SecureRandomBytes returns the requested number of bytes using crypto/rand
func SecureRandomBytes(length int) []byte {
	var randomBytes = make([]byte, length)
	_, err := rand.Read(randomBytes)
	if err != nil {
		log.Fatal("Unable to generate random bytes")
	}
	return randomBytes
}

func RandString(len int) string {
	buff := make([]byte, len)
	rand.Read(buff)
	str := base64.StdEncoding.EncodeToString(buff)
	// Base 64 can be longer than len
	return str[:len]
}

// Int32 is a function that returns a int32 generated by
// 'bitwise-or'ing 4 bytes from crypto/rand.Read().
func SecureRandomInt32() (int32, error) {
	b := SecureRandomBytes(4)

	var i32 int32

	for i := range b {
		offset := uint32(i) + 1
		shift := 32 - (8 * offset)
		i32 = i32 | int32(b[i])<<shift
	}

	return i32, nil
}

// Int64 is a function that returns a int64 generated by
// 'bitwise-or'ing 4 bytes from crypto/rand.Read().
func SecureRandomInt64() (int64, error) {
	b := SecureRandomBytes(8)

	var i64 int64

	for i := range b {
		offset := uint64(i) + 1
		shift := 64 - (8 * offset)
		i64 = i64 | int64(b[i])<<shift
	}

	return i64, nil
}
